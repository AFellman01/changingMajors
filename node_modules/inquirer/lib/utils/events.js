'use strict';
var rx = require('rx-lite-aggregates');

function normalizeKeypressEvents(value, key) {
<<<<<<< HEAD
  return {value: value, key: key || {}};
}

module.exports = function (rl) {
  var keypress = rx.Observable.fromEvent(rl.input, 'keypress', normalizeKeypressEvents)
    .filter(function (e) {
      // Ignore `enter` key. On the readline, we only care about the `line` event.
      return e.key.name !== 'enter' && e.key.name !== 'return';
    });
=======
  return { value: value, key: key || {} };
}

module.exports = function(rl) {
  var keypress = rx.Observable.fromEvent(rl.input, 'keypress', normalizeKeypressEvents)
    // Ignore `enter` key. On the readline, we only care about the `line` event.
    .filter(({ key }) => key.name !== 'enter' && key.name !== 'return');
>>>>>>> dade7ea33ae9b7b47469401729da7eb5f8cc58d7

  return {
    line: rx.Observable.fromEvent(rl, 'line'),
    keypress: keypress,

<<<<<<< HEAD
    normalizedUpKey: keypress.filter(function (e) {
      return e.key.name === 'up' || e.key.name === 'k' || (e.key.name === 'p' && e.key.ctrl);
    }).share(),

    normalizedDownKey: keypress.filter(function (e) {
      return e.key.name === 'down' || e.key.name === 'j' || (e.key.name === 'n' && e.key.ctrl);
    }).share(),

    numberKey: keypress.filter(function (e) {
      return e.value && '123456789'.indexOf(e.value) >= 0;
    }).map(function (e) {
      return Number(e.value);
    }).share(),

    spaceKey: keypress.filter(function (e) {
      return e.key && e.key.name === 'space';
    }).share(),

    aKey: keypress.filter(function (e) {
      return e.key && e.key.name === 'a';
    }).share(),

    iKey: keypress.filter(function (e) {
      return e.key && e.key.name === 'i';
    }).share()
=======
    normalizedUpKey: keypress
      .filter(
        ({ key }) =>
          key.name === 'up' || key.name === 'k' || (key.name === 'p' && key.ctrl)
      )
      .share(),

    normalizedDownKey: keypress
      .filter(
        ({ key }) =>
          key.name === 'down' || key.name === 'j' || (key.name === 'n' && key.ctrl)
      )
      .share(),

    numberKey: keypress
      .filter(e => e.value && '123456789'.indexOf(e.value) >= 0)
      .map(e => Number(e.value))
      .share(),

    spaceKey: keypress.filter(({ key }) => key && key.name === 'space').share(),
    aKey: keypress.filter(({ key }) => key && key.name === 'a').share(),
    iKey: keypress.filter(({ key }) => key && key.name === 'i').share()
>>>>>>> dade7ea33ae9b7b47469401729da7eb5f8cc58d7
  };
};
